package peppertech.crm.api.Tasks.Model.DTO;

import com.fasterxml.jackson.annotation.JsonFormat;
import io.swagger.v3.oas.annotations.media.Schema;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.io.Serializable;
import java.util.List;

/**
 * Data Transfer Object for a Kanban Card (Task).
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class CardDTO implements Serializable {

    @Schema(description = "Unique identifier of the card (task), generated by the database.",
            example = "64a1f9b5e4b0f23d4c8a7e12", hidden = true)
    private String id;

    @Schema(description = "Title or subject of the task. Must not be empty and between 3 and 100 characters.",
            example = "Implement authentication module")
    private String title;

    @Schema(description = "Detailed description of the task.",
            example = "Implement JWT based authentication with refresh tokens.")
    private String description;

    @Schema(description = "Creation date of the task.",
            example = "2025-06-09T15:00:00.000Z", type = "string", format = "date-time")
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSX")
    private String createdAt;

    @Schema(description = "Due date for task completion.",
            example = "2025-06-20", type = "string", format = "date")
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    private String dueDate;

    @Schema(description = "Reminder date for the task.",
            example = "2025-06-18", type = "string", format = "date")
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    private String reminderDate;

    @Schema(description = "Date when the task was closed/completed.",
            example = "2025-06-22", type = "string", format = "date")
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    private String closedDate;

    @Schema(description = "Priority level of the task.",
            example = "HIGH")
    private String priority;

    @Schema(description = "Current status of the task.",
            example = "IN_PROGRESS")
    private String status;

    @Schema(description = "ID of the user assigned to this task.",
            example = "64a1f9b5e4b0f23d4c8a7e15")
    private String assignedTo;

    @Schema(description = "ID of the user who created the task.",
            example = "64a1f9b5e4b0f23d4c8a7e10")
    private String createdBy;

    @Schema(description = "ID of the user who last modified the task.",
            example = "64a1f9b5e4b0f23d4c8a7e14")
    private String modifiedBy;

    @Schema(description = "ID of the column (phase) this task belongs to.",
            example = "64a1f9b5e4b0f23d4c8a7e20")
    private String column;

    @Schema(description = "List of tag IDs associated with this task.",
            example = "[\"64a1f9b5e4b0f23d4c8a7e30\", \"64a1f9b5e4b0f23d4c8a7e31\"]")
    private List<String> tags;

    @Schema(description = "List of file IDs attached to this task.",
            example = "[\"64a1f9b5e4b0f23d4c8a7e40\"]")
    private List<String> files;

    @Schema(description = "List of comment IDs linked to this task.",
            example = "[\"64a1f9b5e4b0f23d4c8a7e50\"]")
    private List<String> comments;

    @Schema(description = "List of subtasks associated with this task.")
    private List<String> subtasks;
}
